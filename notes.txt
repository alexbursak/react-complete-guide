Lesson 95
Cleanup work can be performed be `componentWillUnmount` for class based components and `useEffect` for
function based components (by returning a function in useEffect and the function might have login to
do the cleanup)
useEffect - by passing an empty array as a second arg - the cleanup will run only one when component gets
destroyed. If not args passed the function will run on every update cycle.

Lesson 98
React.memo - used to make sure that components updates only when data changed.
Looks like the component (Cockpit) is still not changing so I assume that this might
be redundant

Lesson 99
Use `React.memo` & `shouldComponentUpdate` wisely. Do not abuse it as it an extra check.

Lesson 100
PureComponent - used to check if any of the data (props) changed in the class to make sure that component
re-renders. Similar to have `shouldComponentUpdate` but fir all properties (props). You must extend
from `PureComponent` instead of `Component`.

Lesson 101
render() - does not updates DOM straight away but instead compares virtual DOM to old virtual DOM to see
if there are any differences and only renders only differences in real DOM.

Lesson 102
Array can be returned in render(), but make sure you have a unique 'key'.
Use Auxiliary components to wrap other components and tags around.

Lesson 103
...

Lesson 104
React.Fragment - is build in wrapper component (Auxiliary).

Lesson 105
Creating HOC with properties - className

Lesson 106
Creating functional HOC

Lesson 107
Passing props in HOC

Lesson 108
setState() - is not executed immediately. It gets scheduled and then gets executed.
If you need to access old state - use function in `setState` <- important

Lesson 109
prop-types - allows describe types of properties for a component. Good stuff.

Lesson 110
`ref` - an prop that could be passed to a component that allows to access the current element
1st way - `ref={(inputEl) => {this.inputElement = inputEl}}` then can be used in componentDidMount
2nd way - `this.inputElementRef = React.createRef();` in constructor then
          `ref={this.inputElementRef}` in component and then can be used in componentDidMount (current)

Lesson 111
`ref` for functional components. `const toggleBtnRef = useRef(null);`

Lesson 112
Context intro

Lesson 113
Context component - allows passing properties from component A to component D skipping B & C.
A good feature. `React.createContext` - used to create a context component. Looks like something like
"global" variables container, but you can define how "global" it can be.
Useful when passing a long chain of data trough multiple components.

